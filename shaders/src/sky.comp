#version 460

layout (local_size_x = 16, local_size_y = 16) in;
layout (rgba8, set = 0, binding = 0) uniform image2D IMAGE;


layout (push_constant) uniform constants
{
    vec4 data[4];
} PUSH_CONSTANTS;


// Return random noise in the range [0.0, 1.0], as a function of x.
float Noise2d(in vec2 x)
{
    const float xHash = cos(x.x * 37.f);
    const float yHash = cos(x.y * 57.f);
    return fract(415.92653f * (xHash + yHash));
}


// Convert Noise2d() into a "star field" by stomping everthing below fThreshhold to zero.
float NoisyStarField(in vec2 vSamplePos, float fThreshhold)
{
    float starVal = Noise2d(vSamplePos);

    starVal = starVal >= fThreshhold ? pow((starVal - fThreshhold) / (1.f - fThreshhold), 6.f) : 0.f;

    return starVal;
}


// Stabilize NoisyStarField() by only sampling at integer values.
float StableStarField(in vec2 vSamplePos, float fThreshhold)
{
    // Linear interpolation between four samples.
    // Note: This approach has some visual artifacts.
    // There must be a better way to "anti alias" the star field.
    const float fractX = fract(vSamplePos.x);
    const float fractY = fract(vSamplePos.y);
    const vec2 floorSample = floor(vSamplePos);    
    const float v1 = NoisyStarField(floorSample, fThreshhold);
    const float v2 = NoisyStarField(floorSample + vec2(0.f, 1.f), fThreshhold);
    const float v3 = NoisyStarField(floorSample + vec2(1.f, 0.f), fThreshhold);
    const float v4 = NoisyStarField(floorSample + vec2(1.f, 1.f), fThreshhold);

    const float starVal = 
                    v1 * (1.f - fractX) * (1.f - fractY)
        			+ v2 * (1.f - fractX) * fractY
        			+ v3 * fractX * (1.f - fractY)
        			+ v4 * fractX * fractY;
	return starVal;
}


vec4 mainImage(in vec2 fragCoord)
{
    const vec2 iResolution = imageSize(IMAGE);
	// Sky Background Color
	vec3 vColor = PUSH_CONSTANTS.data[0].xyz * fragCoord.y / iResolution.y;

    // Note: Choose fThreshhold in the range [0.99, 0.9999].
    // Higher values (i.e., closer to one) yield a sparser starfield.
    const float starFieldThreshhold = PUSH_CONSTANTS.data[0].w; //0.97;

    // Stars with a slow crawl.
    const float xRate = 0.2;
    const float yRate = -0.06;
    const vec2 vSamplePos = fragCoord.xy + vec2(xRate * float(1), yRate * float(1));
	const float starVal = StableStarField(vSamplePos, starFieldThreshhold);
    vColor += vec3(starVal);
	
	return vec4(vColor, 1.0);
}


void main() 
{
	const ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	const ivec2 size = imageSize(IMAGE);
    
    if(texelCoord.x < size.x && texelCoord.y < size.y) {
        const vec4 color = mainImage(texelCoord);
    
        imageStore(IMAGE, texelCoord, color);
    }   
}
